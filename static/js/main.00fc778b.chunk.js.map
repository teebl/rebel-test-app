{"version":3,"sources":["components/Button/Button.js","components/Button/index.js","components/List/List.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","button","_templateObject","Button","props","onButtonClicked","link","react_default","a","createElement","href","onClick","children","StyledList","ul","List_templateObject","StyledListItem","li","_templateObject2","List","listItems","deleteHandler","Object","entries","map","listPair","i","key","KEY_VALUE_REGEX","StyledApp","div","App_templateObject","TextFieldWrapper","App_templateObject2","ButtonWrapper","_templateObject3","ListWrapper","_templateObject4","App","_useState","useState","secondKey","_useState2","slicedToArray","list","setList","_useState3","_useState4","textField","setTextField","_useState5","_useState6","JsonLink","setJsonLink","useEffect","FILENAME","encodeURIComponent","JSON","stringify","checkKeyValueIsValid","string","test","parseKeyValue","exec","onSubmit","event","preventDefault","_parseKeyValue","_parseKeyValue2","value","alert","newList","objectSpread","defineProperty","onChange","target","components_Button","type","keys","sort","b","localeCompare","forEach","components_List","_","omit","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00fc778b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.button`\r\n  background-color: green;\r\n  display: block;\r\n  min-width: 200px;\r\n  max-width: 400px;\r\n  padding: 10px;\r\n  border: none;\r\n  box-shadow: 0 10px 6px -6px #777;\r\n`;\r\n\r\nconst Button = props => {\r\n  const { onButtonClicked, link } = props;\r\n\r\n  const clickHandler = () => {\r\n    if (onButtonClicked) {\r\n      onButtonClicked();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledButton href={link ? link : null} onClick={clickHandler}>\r\n      {props.children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Button from \"./Button\";\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledList = styled.ul`\r\n  background-color: light-red;\r\n`;\r\n\r\nconst StyledListItem = styled.li`\r\n  :hover {\r\n    background-color: red;\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst List = props => {\r\n  const { listItems, deleteHandler } = props;\r\n\r\n  const renderListItems = () => {\r\n    const listPairs = Object.entries(listItems);\r\n    //map each object element to a li with <key>=<value> format\r\n    return listPairs.map((listPair, i) => (\r\n      <StyledListItem\r\n        key={i}\r\n        onClick={() => {\r\n          deleteHandler(listPair[0]);\r\n        }}\r\n      >\r\n        <p>\r\n          {listPair[0]}={listPair[1]}\r\n        </p>\r\n      </StyledListItem>\r\n    ));\r\n  };\r\n\r\n  return <StyledList>{renderListItems()}</StyledList>;\r\n};\r\n\r\nexport default List;\r\n","import List from \"./List\";\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport styled from \"styled-components\";\nimport Button from \"./components/Button\";\nimport List from \"./components/List\";\n\nconst KEY_VALUE_REGEX = /([\\w|\\d]+)(?:\\s)*(?:=){1}(?:\\s)*([\\w|\\d]+)/;\nconst FILENAME = \"export.json\";\nconst CONTENT_TYPE = \"text/json;charset=utf-8,\";\n\nconst StyledApp = styled.div`\n  background: lightgrey;\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(2, minmax(250px, 1fr));\n  grid-template-rows: 20% auto;\n  grid-gap: 40px;\n  padding: 0 40px;\n`;\n\nconst TextFieldWrapper = styled.div`\n  grid-column: span 2;\n  background-color: orange;\n`;\n\nconst ButtonWrapper = styled.div`\n  background-color: grey;\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst ListWrapper = styled.div`\n  flex-grow: 2;\n  background-color: lightblue;\n`;\n\nconst App = () => {\n  const [list, setList] = useState({ key: \"value\", secondKey: \"secondValue\" });\n  const [textField, setTextField] = useState(\"\");\n  const [JsonLink, setJsonLink] = useState(\"\");\n\n  useEffect(() => {\n    setJsonLink(\n      FILENAME + CONTENT_TYPE + encodeURIComponent(JSON.stringify(list))\n    );\n  }, [list]);\n\n  const handleTextFieldChange = event => {\n    setTextField(event.target.value);\n  };\n\n  const handleTextFieldSubmit = event => {\n    event.preventDefault();\n    if (checkKeyValueIsValid(textField)) {\n      const [string, key, value] = parseKeyValue(textField);\n      if (list[key]) {\n        alert(\"a unique <key> is required\");\n        return;\n      }\n      const newList = { [key]: value, ...list };\n      setList(newList);\n      setTextField(\"\");\n    } else {\n      alert(\"Must submit in a <key>=<value> format. Alphanumerics only\");\n    }\n  };\n\n  const checkKeyValueIsValid = string => KEY_VALUE_REGEX.test(string);\n\n  const parseKeyValue = string => KEY_VALUE_REGEX.exec(string);\n\n  const alphaByKey = () => {\n    let newList = {};\n    Object.keys(list)\n      .sort()\n      .forEach(key => {\n        newList[key] = list[key];\n      });\n\n    setList(newList);\n  };\n\n  const alphaByValue = () => {\n    let newList = {};\n    Object.keys(list)\n      .sort((a, b) => list[a].localeCompare(list[b]))\n      .forEach(key => {\n        newList[key] = list[key];\n      });\n\n    setList(newList);\n  };\n\n  const deleteHandler = key => {\n    const newList = _.omit(list, key);\n    setList(newList);\n  };\n\n  const clearHandler = () => {\n    setList({});\n    setTextField(\"\");\n  };\n\n  return (\n    <StyledApp>\n      <TextFieldWrapper>\n        <form onSubmit={handleTextFieldSubmit}>\n          <label>\n            <textarea value={textField} onChange={handleTextFieldChange} />\n          </label>\n          <Button type=\"submit\" value=\"Submit\">\n            Submit\n          </Button>\n        </form>\n      </TextFieldWrapper>\n      <ButtonWrapper>\n        <Button link={JsonLink}>Export to JSON</Button>\n        <Button onButtonClicked={alphaByValue}>\n          Sort Values Alphabetically\n        </Button>\n        <Button onButtonClicked={alphaByKey}>Sort keys Alphabetically</Button>\n        <Button onButtonClicked={clearHandler}>Clear All</Button>\n      </ButtonWrapper>\n      <ListWrapper>\n        <List listItems={list} deleteHandler={deleteHandler} />\n      </ListWrapper>\n    </StyledApp>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}